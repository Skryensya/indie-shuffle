# =========================
# ðŸ”¨ BUILD STAGE
# =========================
FROM elixir:1.15-slim AS build

# Set working directory
WORKDIR /app

# Install system packages
RUN apt-get update && apt-get install -y \
  build-essential \
  git \
  curl \
  inotify-tools \
  python3 \
  && rm -rf /var/lib/apt/lists/*

# Install Hex + Rebar
RUN mix local.hex --force && mix local.rebar --force

# Install Node.js 20.x (same as dev)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
  apt-get install -y nodejs && \
  npm install -g npm@latest && \
  rm -rf /var/lib/apt/lists/*

# Copy mix files to cache deps
COPY mix.exs mix.lock ./

# Install Elixir deps (prod only)
RUN MIX_ENV=prod mix deps.get --only prod

# Copy the entire project
COPY . .

# Compile Elixir code
RUN MIX_ENV=prod mix compile

# Build assets (identical to dev logic)
RUN MIX_ENV=prod mix assets.setup && \
    MIX_ENV=prod mix assets.build

# Generate Phoenix release
RUN MIX_ENV=prod mix release


# =========================
# ðŸš€ RUNTIME STAGE
# =========================
FROM debian:bookworm-slim AS app

# Install libs needed for Erlang runtime & SQLite
RUN apt-get update && apt-get install -y \
  openssl \
  libncurses5 \
  libstdc++6 \
  libsqlite3-0 \
  ca-certificates \
  curl \
  && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy release from build stage
COPY --from=build /app/_build/prod/rel /app/

# Default env vars
ENV MIX_ENV=prod \
    HOME=/app

# Phoenix port
EXPOSE 4000

# HEALTHCHECK-compatible command
CMD ["bin/indies_shuffle", "start"]
